module tosig_ad
use tosig
!integer,parameter :: d=3
!integer,parameter :: ord=4
!integer, parameter:: dim = (d**(ord+1)-1)/(d-1)
!subroutine conc_ad( X1, X1_ad, X2, X2_ad, X3, X3_ad, X4, X4_ad, X5, X5_ad, X6_ad, Y1, Y1_ad, Y2, Y2_ad, Y3, Y3_ad, Y4, Y4_ad, Y5, &
!     &Y5_ad, Y6_ad, d )

contains  

subroutine vec2tensor(X1,X2,X3,X4,A)
implicit none
integer:: n, k, k0, k1
real(kind=8), intent(in) :: A(dim)
real(kind=8), intent(out)  :: X1(d)
real(kind=8), intent(out)  :: X2(d,d)
real(kind=8), intent(out)  :: X3(d,d,d)
real(kind=8), intent(out)  :: X4(d,d,d,d)

k1=1
k=1; k0 = k1 + 1; k1 = k1 + d**k
X1 = reshape(A(k0:k1), (/d/), order=(/1/))
k=2; k0 = k1 + 1; k1 = k1 + d**k
X2 = reshape(A(k0:k1), (/d,d/), order=(/2,1/))
k=3; k0 = k1 + 1; k1 = k1 + d**k
X3 = reshape(A(k0:k1), (/d,d,d/), order=(/3,2,1/))
k=4; k0 = k1 + 1; k1 = k1 + d**k
X4 = reshape(A(k0:k1), (/d,d,d,d/), order=(/4,3,2,1/))

end subroutine vec2tensor
subroutine conc_ad( X1, X1_ad, X2, X2_ad, X3, X3_ad, X4, X4_ad, Y1, Y1_ad, Y2, Y2_ad, Y3, Y3_ad, Y4, Y4_ad )
!********************************************x**********************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 4.0.3   **
!******************************************************************
!******************************************************************
implicit none

!==============================================
! declare parameters
!==============================================
integer, parameter :: ikind1 = 8
integer, parameter :: ikind2 = 8
integer, parameter :: ikind3 = 8
integer, parameter :: ikind4 = 8
integer, parameter :: ikind5 = 8
integer, parameter :: ikind6 = 8
integer, parameter :: ikind7 = 8
integer, parameter :: ikind8 = 8
integer, parameter :: ikind9 = 8
integer, parameter :: ikinea = 8
integer, parameter :: ikineb = 8
integer, parameter :: ikinec = 8
integer, parameter :: ikined = 8
integer, parameter :: ikinee = 8
integer, parameter :: ikinef = 8
integer, parameter :: ikineg = 8
integer, parameter :: ikineh = 8
integer, parameter :: ikinei = 8

!==============================================
! declare arguments
!==============================================
!integer, intent(in) :: d
real(kind=8), intent(in) :: X1(d)
real(kind=8), intent(inout) :: X1_ad(d)
real(kind=8), intent(in) :: X2(d,d)
real(kind=8), intent(inout) :: X2_ad(d,d)
real(kind=8), intent(in) :: X3(d,d,d)
real(kind=8), intent(inout) :: X3_ad(d,d,d)
real(kind=8), intent(in) :: X4(d,d,d,d)
real(kind=8), intent(inout) :: X4_ad(d,d,d,d)
!real(kind=8), intent(in) :: X5(d,d,d,d,d)
!real(kind=8), intent(inout) :: X5_ad(d,d,d,d,d)
!real(kind=8), intent(inout) :: X6_ad(d,d,d,d,d,d)
real(kind=8), intent(in) :: Y1(d)
real(kind=8), intent(inout) :: Y1_ad(d)
real(kind=8), intent(in) :: Y2(d,d)
real(kind=8), intent(inout) :: Y2_ad(d,d)
real(kind=8), intent(in) :: Y3(d,d,d)
real(kind=8), intent(inout) :: Y3_ad(d,d,d)
real(kind=8), intent(in) :: Y4(d,d,d,d)
real(kind=8), intent(inout) :: Y4_ad(d,d,d,d)
!real(kind=8), intent(in) :: Y5(d,d,d,d,d)
!real(kind=8), intent(inout) :: Y5_ad(d,d,d,d,d)
!real(kind=8), intent(inout) :: Y6_ad(d,d,d,d,d,d)

!==============================================
! declare local variables
!==============================================
real(kind=8) :: Z1_ad(d)
real(kind=8) :: Z2_ad(d,d)
real(kind=8) :: Z3_ad(d,d,d)
real(kind=8) :: Z4_ad(d,d,d,d)
!real(kind=8) :: Z5_ad(d,d,d,d,d)
!real(kind=8) :: Z6_ad(d,d,d,d,d,d)
integer :: i1
integer :: i2
integer :: i3
integer :: i4
integer :: i5
integer :: i6

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES NO ALLOC
!----------------------------------------------
Z1_ad(:) = 0._ikined
Z2_ad(:,:) = 0._ikinee
Z3_ad(:,:,:) = 0._ikinef
Z4_ad(:,:,:,:) = 0._ikineg
!Z5_ad(:,:,:,:,:) = 0._ikineh
!Z6_ad(:,:,:,:,:,:) = 0._ikinei

!Z6_ad = Z6_ad+X6_ad
!X6_ad = 0._ikind1
!Z5_ad = Z5_ad+X5_ad
!X5_ad = 0._ikind2
Z4_ad = Z4_ad+X4_ad
X4_ad = 0._ikind3
Z3_ad = Z3_ad+X3_ad
X3_ad = 0._ikind4
Z2_ad = Z2_ad+X2_ad
X2_ad = 0._ikind5
Z1_ad = Z1_ad+X1_ad
X1_ad = 0._ikind6
do i1 = 1, d
  do i2 = 1, d
    do i3 = 1, d
      do i4 = 1, d
        ! do i5 = 1, d
        !   do i6 = 1, d
        !     X1_ad(i1) = X1_ad(i1)+Z6_ad(i1,i2,i3,i4,i5,i6)*Y5(i2,i3,i4,i5,i6)
        !     X2_ad(i1,i2) = X2_ad(i1,i2)+Z6_ad(i1,i2,i3,i4,i5,i6)*Y4(i3,i4,i5,i6)
        !     X3_ad(i1,i2,i3) = X3_ad(i1,i2,i3)+Z6_ad(i1,i2,i3,i4,i5,i6)*Y3(i4,i5,i6)
        !     X4_ad(i1,i2,i3,i4) = X4_ad(i1,i2,i3,i4)+Z6_ad(i1,i2,i3,i4,i5,i6)*Y2(i5,i6)
        !     X5_ad(i1,i2,i3,i4,i5) = X5_ad(i1,i2,i3,i4,i5)+Z6_ad(i1,i2,i3,i4,i5,i6)*Y1(i6)
        !     X6_ad(i1,i2,i3,i4,i5,i6) = X6_ad(i1,i2,i3,i4,i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)
        !     Y1_ad(i6) = Y1_ad(i6)+Z6_ad(i1,i2,i3,i4,i5,i6)*X5(i1,i2,i3,i4,i5)
        !     Y2_ad(i5,i6) = Y2_ad(i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)*X4(i1,i2,i3,i4)
        !     Y3_ad(i4,i5,i6) = Y3_ad(i4,i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)*X3(i1,i2,i3)
        !     Y4_ad(i3,i4,i5,i6) = Y4_ad(i3,i4,i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)*X2(i1,i2)
        !     Y5_ad(i2,i3,i4,i5,i6) = Y5_ad(i2,i3,i4,i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)*X1(i1)
        !     Y6_ad(i1,i2,i3,i4,i5,i6) = Y6_ad(i1,i2,i3,i4,i5,i6)+Z6_ad(i1,i2,i3,i4,i5,i6)
        !     Z6_ad(i1,i2,i3,i4,i5,i6) = 0._ikind7
        !   end do
        !   X1_ad(i1) = X1_ad(i1)+Z5_ad(i1,i2,i3,i4,i5)*Y4(i2,i3,i4,i5)
        !   X2_ad(i1,i2) = X2_ad(i1,i2)+Z5_ad(i1,i2,i3,i4,i5)*Y3(i3,i4,i5)
        !   X3_ad(i1,i2,i3) = X3_ad(i1,i2,i3)+Z5_ad(i1,i2,i3,i4,i5)*Y2(i4,i5)
        !   X4_ad(i1,i2,i3,i4) = X4_ad(i1,i2,i3,i4)+Z5_ad(i1,i2,i3,i4,i5)*Y1(i5)
        !   X5_ad(i1,i2,i3,i4,i5) = X5_ad(i1,i2,i3,i4,i5)+Z5_ad(i1,i2,i3,i4,i5)
        !   Y1_ad(i5) = Y1_ad(i5)+Z5_ad(i1,i2,i3,i4,i5)*X4(i1,i2,i3,i4)
        !   Y2_ad(i4,i5) = Y2_ad(i4,i5)+Z5_ad(i1,i2,i3,i4,i5)*X3(i1,i2,i3)
        !   Y3_ad(i3,i4,i5) = Y3_ad(i3,i4,i5)+Z5_ad(i1,i2,i3,i4,i5)*X2(i1,i2)
        !   Y4_ad(i2,i3,i4,i5) = Y4_ad(i2,i3,i4,i5)+Z5_ad(i1,i2,i3,i4,i5)*X1(i1)
        !   Y5_ad(i1,i2,i3,i4,i5) = Y5_ad(i1,i2,i3,i4,i5)+Z5_ad(i1,i2,i3,i4,i5)
        !   Z5_ad(i1,i2,i3,i4,i5) = 0._ikind8
        ! end do
        X1_ad(i1) = X1_ad(i1)+Z4_ad(i1,i2,i3,i4)*Y3(i2,i3,i4)
        X2_ad(i1,i2) = X2_ad(i1,i2)+Z4_ad(i1,i2,i3,i4)*Y2(i3,i4)
        X3_ad(i1,i2,i3) = X3_ad(i1,i2,i3)+Z4_ad(i1,i2,i3,i4)*Y1(i4)
        X4_ad(i1,i2,i3,i4) = X4_ad(i1,i2,i3,i4)+Z4_ad(i1,i2,i3,i4)
        Y1_ad(i4) = Y1_ad(i4)+Z4_ad(i1,i2,i3,i4)*X3(i1,i2,i3)
        Y2_ad(i3,i4) = Y2_ad(i3,i4)+Z4_ad(i1,i2,i3,i4)*X2(i1,i2)
        Y3_ad(i2,i3,i4) = Y3_ad(i2,i3,i4)+Z4_ad(i1,i2,i3,i4)*X1(i1)
        Y4_ad(i1,i2,i3,i4) = Y4_ad(i1,i2,i3,i4)+Z4_ad(i1,i2,i3,i4)
        Z4_ad(i1,i2,i3,i4) = 0._ikind9
      end do
      X1_ad(i1) = X1_ad(i1)+Z3_ad(i1,i2,i3)*Y2(i2,i3)
      X2_ad(i1,i2) = X2_ad(i1,i2)+Z3_ad(i1,i2,i3)*Y1(i3)
      X3_ad(i1,i2,i3) = X3_ad(i1,i2,i3)+Z3_ad(i1,i2,i3)
      Y1_ad(i3) = Y1_ad(i3)+Z3_ad(i1,i2,i3)*X2(i1,i2)
      Y2_ad(i2,i3) = Y2_ad(i2,i3)+Z3_ad(i1,i2,i3)*X1(i1)
      Y3_ad(i1,i2,i3) = Y3_ad(i1,i2,i3)+Z3_ad(i1,i2,i3)
      Z3_ad(i1,i2,i3) = 0._ikinea
    end do
    X1_ad(i1) = X1_ad(i1)+Z2_ad(i1,i2)*Y1(i2)
    X2_ad(i1,i2) = X2_ad(i1,i2)+Z2_ad(i1,i2)
    Y1_ad(i2) = Y1_ad(i2)+Z2_ad(i1,i2)*X1(i1)
    Y2_ad(i1,i2) = Y2_ad(i1,i2)+Z2_ad(i1,i2)
    Z2_ad(i1,i2) = 0._ikineb
  end do
  X1_ad(i1) = X1_ad(i1)+Z1_ad(i1)
  Y1_ad(i1) = Y1_ad(i1)+Z1_ad(i1)
  Z1_ad(i1) = 0._ikinec
end do

end subroutine conc_ad

subroutine delta_s_ad( X_ad, DX_ad, n )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 4.0.3   **
!******************************************************************
!******************************************************************
implicit none

!==============================================
! declare parameters
!==============================================
integer, parameter :: ikind1 = 8

!==============================================
! declare arguments
!==============================================
!integer, intent(in) :: d
integer, intent(in) :: n
real(kind=8), intent(inout) :: DX_ad(d,n-1)
real(kind=8), intent(inout) :: X_ad(d,n)

!==============================================
! declare local variables
!==============================================
integer :: i
integer :: j

do i = 1, d
  do j = 1, n-1
    X_ad(i,j+1) = X_ad(i,j+1)+DX_ad(i,j)
    X_ad(i,j) = X_ad(i,j)-DX_ad(i,j)
    DX_ad(i,j) = 0._ikind1
  end do
end do

end subroutine delta_s_ad

!subroutine p2s_ad( X, X_ad, X1, X1_ad, X2, X2_ad, X3, X3_ad, X4, X4_ad, X5, X5_ad, X6, X6_ad, d, n, l_ad )
!need X and n in forward
subroutine p2s_ad( X, X_ad, Sig1_ad,  n )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 4.0.3   **
!******************************************************************
!******************************************************************
!use fg
implicit none

!==============================================
! declare parameters
!==============================================
integer, parameter :: ikind1 = 8
integer, parameter :: ikind2 = 8
integer, parameter :: ikind3 = 8
integer, parameter :: ikind4 = 8
integer, parameter :: ikind5 = 8
integer, parameter :: ikind6 = 8
integer, parameter :: ikind7 = 8

!==============================================
! declare arguments
!==============================================
!integer, intent(in) :: d
integer, intent(in) :: n
real(kind=8), intent(in) :: X(d,n)
!real(kind=8), intent(inout) :: X1(d)
real(kind=8) :: X1(d)
!real(kind=8), intent(inout) :: X1_ad(d)
real(kind=8) :: X1_ad(d)
!real(kind=8), intent(inout) :: X2(d,d)
real(kind=8) :: X2(d,d)
!real(kind=8), intent(inout) :: X2_ad(d,d)
real(kind=8):: X2_ad(d,d)
!real(kind=8), intent(inout) :: X3(d,d,d)
real(kind=8) :: X3(d,d,d)
!real(kind=8), intent(inout) :: X3_ad(d,d,d)
real(kind=8) :: X3_ad(d,d,d)
!real(kind=8), intent(inout) :: X4(d,d,d,d)
real(kind=8) :: X4(d,d,d,d)
!real(kind=8), intent(inout) :: X4_ad(d,d,d,d)
real(kind=8):: X4_ad(d,d,d,d)
!real(kind=8), intent(inout) :: X5(d,d,d,d,d)
!real(kind=8), intent(inout) :: X5_ad(d,d,d,d,d)
!real(kind=8), intent(inout) :: X6(d,d,d,d,d,d)
!real(kind=8), intent(inout) :: X6_ad(d,d,d,d,d,d)
real(kind=8), intent(inout) :: X_ad(d,n)
!real(kind=8), intent(in) :: l_ad
real(kind=8), intent(inout):: Sig1_ad(dim)

!==============================================
! declare local variables
!==============================================
real(kind=8) :: DX(d,n-1)
real(kind=8) :: DX_ad(d,n-1)
real(kind=8) :: Y1(d)
real(kind=8) :: Y1_ad(d)
real(kind=8) :: Y2(d,d)
real(kind=8) :: Y2_ad(d,d)
real(kind=8) :: Y3(d,d,d)
real(kind=8) :: Y3_ad(d,d,d)
real(kind=8) :: Y4(d,d,d,d)
real(kind=8) :: Y4_ad(d,d,d,d)
!real(kind=8) :: Y5(d,d,d,d,d)
!real(kind=8) :: Y5_ad(d,d,d,d,d)
!real(kind=8) :: Y6(d,d,d,d,d,d)
!real(kind=8) :: Y6_ad(d,d,d,d,d,d)
integer :: j
integer :: j1
!real(kind=8) :: lh_ad(d)
!real(kind=8) :: li_ad

!----------------------------------------------
! RESET LOCAL ADJOINT VARIABLES NO ALLOC
!----------------------------------------------

X1_ad(:) = 0._ikind2
X2_ad(:,:) = 0._ikind3
X3_ad(:,:,:) = 0._ikind4
X4_ad(:,:,:,:) = 0._ikind5

DX_ad(:,:) = 0._ikind1
Y1_ad(:) = 0._ikind2
Y2_ad(:,:) = 0._ikind3
Y3_ad(:,:,:) = 0._ikind4
Y4_ad(:,:,:,:) = 0._ikind5
!Y5_ad(:,:,:,:,:) = 0._ikind6
!Y6_ad(:,:,:,:,:,:) = 0._ikind7

call delta_s( X,DX,n )
X1 = 0.0d0
X2 = 0.0d0
X3 = 0.0d0
X4 = 0.0d0
!X5 = 0.0d0
!do j = 1, n-1
!  li_ad = l_ad
!  lh_ad = li_ad
!  DX_ad(:,j) = DX_ad(:,j)+2*lh_ad(:)*(DX(:,j)-DXfg(:))*al(:)
!end do
do j = n-1, 1, -1
  X1 = 0.0d0
  X2 = 0.0d0
  X3 = 0.0d0
  X4 = 0.0d0
!  X5 = 0.0d0
!  X6 = 0.0d0
      
call vec2tensor(X1_ad,X2_ad,X3_ad,X4_ad,Sig1_ad)      
  do j1 = 1, j-1
!    call seg( DX(:,j1),Y1,Y2,Y3,Y4,Y5,Y6,d )
!    call conc( X1,X2,X3,X4,X5,X6,Y1,Y2,Y3,Y4,Y5,Y6,d )
    call seg( DX(:,j1),Y1,Y2,Y3,Y4 )
    call conc( X1,X2,X3,X4,Y1,Y2,Y3,Y4 )
  end do
  call seg( DX(:,j),Y1,Y2,Y3,Y4 )
!  call conc_ad( X1,X1_ad,X2,X2_ad,X3,X3_ad,X4,X4_ad,X5,X5_ad,X6_ad,Y1,Y1_ad,Y2,Y2_ad,Y3,Y3_ad,Y4,Y4_ad,Y5,Y5_ad,Y6_ad,d )
  call conc_ad( X1, X1_ad, X2, X2_ad, X3, X3_ad, X4, X4_ad, Y1, Y1_ad, Y2, Y2_ad, Y3, Y3_ad, Y4, Y4_ad )
!  call seg_ad( DX(:,j),DX_ad(:,j),Y1_ad,Y2_ad,Y3_ad,Y4_ad,Y5_ad,Y6_ad,d )
  call seg_ad( DX(:,j),DX_ad(:,j),Y1_ad,Y2_ad,Y3_ad,Y4_ad )
end do
call delta_s_ad( X_ad,DX_ad,n )
Sig1_ad = 0.0
end subroutine p2s_ad

!subroutine seg_ad( X, X_ad, X1_ad, X2_ad, X3_ad, X4_ad, X5_ad, X6_ad, d )
subroutine seg_ad( X, X_ad, X1_ad, X2_ad, X3_ad, X4_ad )
!******************************************************************
!******************************************************************
!** This routine was generated by Automatic differentiation.     **
!** FastOpt: Transformation of Algorithm in Fortran, TAF 4.0.3   **
!******************************************************************
!******************************************************************
implicit none

!==============================================
! declare parameters
!==============================================
integer, parameter :: ikind1 = 8
integer, parameter :: ikind2 = 8
integer, parameter :: ikind3 = 8
integer, parameter :: ikind4 = 8
integer, parameter :: ikind5 = 8
integer, parameter :: ikind6 = 8

!==============================================
! declare arguments
!==============================================
!integer, intent(in) :: d
real(kind=8), intent(in) :: X(d)
real(kind=8), intent(inout) :: X1_ad(d)
real(kind=8), intent(inout) :: X2_ad(d,d)
real(kind=8), intent(inout) :: X3_ad(d,d,d)
real(kind=8), intent(inout) :: X4_ad(d,d,d,d)
!real(kind=8), intent(inout) :: X5_ad(d,d,d,d,d)
!real(kind=8), intent(inout) :: X6_ad(d,d,d,d,d,d)
real(kind=8), intent(inout) :: X_ad(d)

!==============================================
! declare local variables
!==============================================
integer :: i1
integer :: i2
integer :: i3
integer :: i4
integer :: i5
integer :: i6

do i1 = 1, d
  do i2 = 1, d
    do i3 = 1, d
      do i4 = 1, d
        ! do i5 = 1, d
        !   do i6 = 1, d
        !     X_ad(i1) = X_ad(i1)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i2)*X(i3)*X(i4)*X(i5)*X(i6)/720.)
        !     X_ad(i2) = X_ad(i2)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i1)*X(i3)*X(i4)*X(i5)*X(i6)/720.)
        !     X_ad(i3) = X_ad(i3)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i1)*X(i2)*X(i4)*X(i5)*X(i6)/720.)
        !     X_ad(i4) = X_ad(i4)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i1)*X(i2)*X(i3)*X(i5)*X(i6)/720.)
        !     X_ad(i5) = X_ad(i5)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i1)*X(i2)*X(i3)*X(i4)*X(i6)/720.)
        !     X_ad(i6) = X_ad(i6)+X6_ad(i1,i2,i3,i4,i5,i6)*(X(i1)*X(i2)*X(i3)*X(i4)*X(i5)/720.)
        !     X6_ad(i1,i2,i3,i4,i5,i6) = 0._ikind1
        !   end do
        !   X_ad(i1) = X_ad(i1)+X5_ad(i1,i2,i3,i4,i5)*(X(i2)*X(i3)*X(i4)*X(i5)/120.)
        !   X_ad(i2) = X_ad(i2)+X5_ad(i1,i2,i3,i4,i5)*(X(i1)*X(i3)*X(i4)*X(i5)/120.)
        !   X_ad(i3) = X_ad(i3)+X5_ad(i1,i2,i3,i4,i5)*(X(i1)*X(i2)*X(i4)*X(i5)/120.)
        !   X_ad(i4) = X_ad(i4)+X5_ad(i1,i2,i3,i4,i5)*(X(i1)*X(i2)*X(i3)*X(i5)/120.)
        !   X_ad(i5) = X_ad(i5)+X5_ad(i1,i2,i3,i4,i5)*(X(i1)*X(i2)*X(i3)*X(i4)/120.)
        !   X5_ad(i1,i2,i3,i4,i5) = 0._ikind2
        ! end do
        X_ad(i1) = X_ad(i1)+X4_ad(i1,i2,i3,i4)*(X(i2)*X(i3)*X(i4)/24.)
        X_ad(i2) = X_ad(i2)+X4_ad(i1,i2,i3,i4)*(X(i1)*X(i3)*X(i4)/24.)
        X_ad(i3) = X_ad(i3)+X4_ad(i1,i2,i3,i4)*(X(i1)*X(i2)*X(i4)/24.)
        X_ad(i4) = X_ad(i4)+X4_ad(i1,i2,i3,i4)*(X(i1)*X(i2)*X(i3)/24.)
        X4_ad(i1,i2,i3,i4) = 0._ikind3
      end do
      X_ad(i1) = X_ad(i1)+X3_ad(i1,i2,i3)*(X(i2)*X(i3)/6.)
      X_ad(i2) = X_ad(i2)+X3_ad(i1,i2,i3)*(X(i1)*X(i3)/6.)
      X_ad(i3) = X_ad(i3)+X3_ad(i1,i2,i3)*(X(i1)*X(i2)/6.)
      X3_ad(i1,i2,i3) = 0._ikind4
    end do
    X_ad(i1) = X_ad(i1)+X2_ad(i1,i2)*(X(i2)/2.)
    X_ad(i2) = X_ad(i2)+X2_ad(i1,i2)*(X(i1)/2.)
    X2_ad(i1,i2) = 0._ikind5
  end do
  X_ad(i1) = X_ad(i1)+X1_ad(i1)
  X1_ad(i1) = 0._ikind6
end do

end subroutine seg_ad

end module tosig_ad
